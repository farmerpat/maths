#include <iostream>
#include <ostream>

#include "int_util.h"

using namespace Util;

/* --------------------------------------------------------
The sequence of triangle numbers is generated by adding
the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms
would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:
1  : 1
3  : 1,3
6  : 1,2,3,6
10 : 1,2,5,10
15 : 1,3,5,15
21 : 1,3,7,21
28 : 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over
five divisors.
What is the value of the first triangle number to have over
five hundred divisors?
 * ---------------------------------------------------------
 */
int main(void) {
  long result = 0;
  int max_factors_thus_far = 0;
  int target_number_of_factors = 500;
  long triangle_number;
  std::vector<long> factors;
  for (long i = 0;; i++) {
    triangle_number = IntUtil::triangle_number(i);
    int size = IntUtil::factors(triangle_number).size();
    if (size > max_factors_thus_far) {
      max_factors_thus_far = size;
      std::cout << "hit " << max_factors_thus_far << std::endl;
    }

    if (size > target_number_of_factors) {
      result = triangle_number;
      break;
    }
  }

  std::cout << "The first triangle number to have over "
            << target_number_of_factors << " divisors is " << result
            << std::endl;
  return 0;
}

/*
Congratulations, the answer you gave to problem 12 is correct.
You are the 231167th person to have solved this problem.
This problem has a difficulty rating of 5%.
The highest difficulty rating you have solved remains at 5%.
*/
