!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!CMake	D,option	/options specified with -D/
!_TAG_KIND_DESCRIPTION!CMake	f,function	/functions/
!_TAG_KIND_DESCRIPTION!CMake	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!CMake	p,project	/projects/
!_TAG_KIND_DESCRIPTION!CMake	t,target	/targets/
!_TAG_KIND_DESCRIPTION!CMake	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!CMake	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/patrick/hacks/cpp/lisp/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
ATOM	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
CMAKE_CXX_STANDARD	CMakeLists.txt	/^set(CMAKE_CXX_STANDARD 11)$/;"	v
CMAKE_EXPORT_COMPILE_COMMANDS	CMakeLists.txt	/^set(CMAKE_EXPORT_COMPILE_COMMANDS ON)$/;"	v
DEFINE	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
Evaluator	src/evaluator.hpp	/^class Evaluator {};$/;"	c
LIBS	CMakeLists.txt	/^set(LIBS "-lreadline")$/;"	v
LPAREN	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
Printer	src/printer.hpp	/^class Printer{};$/;"	c
QUOTE	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
RPAREN	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
Reader	src/reader.hpp	/^  Reader();$/;"	p	class:Reader	access:public	signature:()
Reader	src/reader.hpp	/^class Reader {$/;"	c
Reader::Reader	src/reader.hpp	/^  Reader();$/;"	p	class:Reader	access:public	signature:()
Reader::_knonw_tokens	src/reader.hpp	/^  TokenSet _knonw_tokens;$/;"	m	class:Reader	typeref:typename:TokenSet	access:protected
Reader::scan	src/reader.hpp	/^  std::vector<Token> scan(std::string);$/;"	p	class:Reader	typeref:typename:std::vector<Token>	access:public	signature:(std::string)
SOURCES	CMakeLists.txt	/^  SOURCES$/;"	v
Scanner	src/scanner.cpp	/^Scanner::Scanner() {$/;"	f	class:Scanner	signature:()
Scanner	src/scanner.hpp	/^  Scanner();$/;"	p	class:Scanner	access:public	signature:()
Scanner	src/scanner.hpp	/^class Scanner {$/;"	c
Scanner::Scanner	src/scanner.cpp	/^Scanner::Scanner() {$/;"	f	class:Scanner	signature:()
Scanner::Scanner	src/scanner.hpp	/^  Scanner();$/;"	p	class:Scanner	access:public	signature:()
Scanner::_knonw_tokens	src/scanner.hpp	/^  TokenSet _knonw_tokens;$/;"	m	class:Scanner	typeref:typename:TokenSet	access:protected
Scanner::scan	src/scanner.cpp	/^std::vector<Token> Scanner::scan(std::string) {$/;"	f	class:Scanner	typeref:typename:std::vector<Token>	signature:(std::string)
Scanner::scan	src/scanner.hpp	/^  std::vector<Token> scan(std::string);$/;"	p	class:Scanner	typeref:typename:std::vector<Token>	access:public	signature:(std::string)
TEST_SOURCES	CMakeLists.txt	/^  TEST_SOURCES$/;"	v
Token	src/token.cpp	/^Token::Token(){};$/;"	f	class:Token	signature:()
Token	src/token.hpp	/^  Token();$/;"	p	class:Token	access:public	signature:()
Token	src/token.hpp	/^  Token(std::string trigger, TokenSymbol symbol)$/;"	f	class:Token	access:public	signature:(std::string trigger,TokenSymbol symbol)
Token	src/token.hpp	/^class Token {$/;"	c
Token::Token	src/token.cpp	/^Token::Token(){};$/;"	f	class:Token	signature:()
Token::Token	src/token.hpp	/^  Token();$/;"	p	class:Token	access:public	signature:()
Token::Token	src/token.hpp	/^  Token(std::string trigger, TokenSymbol symbol)$/;"	f	class:Token	access:public	signature:(std::string trigger,TokenSymbol symbol)
Token::_symbol	src/token.hpp	/^  TokenSymbol _symbol;$/;"	m	class:Token	typeref:typename:TokenSymbol	access:protected
Token::_trigger	src/token.hpp	/^  std::string _trigger;$/;"	m	class:Token	typeref:typename:std::string	access:protected
TokenSet	src/token.cpp	/^TokenSet::TokenSet() {}$/;"	f	class:TokenSet	signature:()
TokenSet	src/token.cpp	/^TokenSet::TokenSet(std::vector<std::string> ss, std::vector<TokenSymbol> ts) {$/;"	f	class:TokenSet	signature:(std::vector<std::string> ss,std::vector<TokenSymbol> ts)
TokenSet	src/token.hpp	/^  TokenSet(std::vector<std::string>, std::vector<TokenSymbol>);$/;"	p	class:TokenSet	access:public	signature:(std::vector<std::string>,std::vector<TokenSymbol>)
TokenSet	src/token.hpp	/^class TokenSet {$/;"	c
TokenSet::TokenSet	src/token.cpp	/^TokenSet::TokenSet() {}$/;"	f	class:TokenSet	signature:()
TokenSet::TokenSet	src/token.cpp	/^TokenSet::TokenSet(std::vector<std::string> ss, std::vector<TokenSymbol> ts) {$/;"	f	class:TokenSet	signature:(std::vector<std::string> ss,std::vector<TokenSymbol> ts)
TokenSet::TokenSet	src/token.hpp	/^  TokenSet(std::vector<std::string>, std::vector<TokenSymbol>);$/;"	p	class:TokenSet	access:public	signature:(std::vector<std::string>,std::vector<TokenSymbol>)
TokenSet::_count	src/token.hpp	/^  unsigned long _count;$/;"	m	class:TokenSet	typeref:typename:unsigned long	access:protected
TokenSet::_ss	src/token.hpp	/^  std::vector<std::string> _ss;$/;"	m	class:TokenSet	typeref:typename:std::vector<std::string>	access:protected
TokenSet::_ts	src/token.hpp	/^  std::vector<TokenSymbol> _ts;$/;"	m	class:TokenSet	typeref:typename:std::vector<TokenSymbol>	access:protected
TokenSet::match	src/token.cpp	/^TokenSymbol TokenSet::match(std::string s) {$/;"	f	class:TokenSet	typeref:typename:TokenSymbol	signature:(std::string s)
TokenSet::match	src/token.hpp	/^  TokenSymbol match(std::string);$/;"	p	class:TokenSet	typeref:typename:TokenSymbol	access:public	signature:(std::string)
TokenSymbol	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	g
UNDEFINED	src/token.hpp	/^enum class TokenSymbol { UNDEFINED, LPAREN, RPAREN, QUOTE, ATOM, DEFINE };$/;"	e	enum:TokenSymbol	access:public
_count	src/token.hpp	/^  unsigned long _count;$/;"	m	class:TokenSet	typeref:typename:unsigned long	access:protected
_knonw_tokens	src/reader.hpp	/^  TokenSet _knonw_tokens;$/;"	m	class:Reader	typeref:typename:TokenSet	access:protected
_knonw_tokens	src/scanner.hpp	/^  TokenSet _knonw_tokens;$/;"	m	class:Scanner	typeref:typename:TokenSet	access:protected
_ss	src/token.hpp	/^  std::vector<std::string> _ss;$/;"	m	class:TokenSet	typeref:typename:std::vector<std::string>	access:protected
_symbol	src/token.hpp	/^  TokenSymbol _symbol;$/;"	m	class:Token	typeref:typename:TokenSymbol	access:protected
_trigger	src/token.hpp	/^  std::string _trigger;$/;"	m	class:Token	typeref:typename:std::string	access:protected
_ts	src/token.hpp	/^  std::vector<TokenSymbol> _ts;$/;"	m	class:TokenSet	typeref:typename:std::vector<TokenSymbol>	access:protected
lisp	CMakeLists.txt	/^add_executable(lisp "src\/main.cpp" ${SOURCES})$/;"	t
lisp	CMakeLists.txt	/^project(lisp)$/;"	p
main	src/main.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int	signature:(int argc,char ** argv)
match	src/token.cpp	/^TokenSymbol TokenSet::match(std::string s) {$/;"	f	class:TokenSet	typeref:typename:TokenSymbol	signature:(std::string s)
match	src/token.hpp	/^  TokenSymbol match(std::string);$/;"	p	class:TokenSet	typeref:typename:TokenSymbol	access:public	signature:(std::string)
scan	src/reader.hpp	/^  std::vector<Token> scan(std::string);$/;"	p	class:Reader	typeref:typename:std::vector<Token>	access:public	signature:(std::string)
scan	src/scanner.cpp	/^std::vector<Token> Scanner::scan(std::string) {$/;"	f	class:Scanner	typeref:typename:std::vector<Token>	signature:(std::string)
scan	src/scanner.hpp	/^  std::vector<Token> scan(std::string);$/;"	p	class:Scanner	typeref:typename:std::vector<Token>	access:public	signature:(std::string)
tests	CMakeLists.txt	/^add_executable(tests src\/test.cpp ${TEST_SRCS})$/;"	t
